#!/bin/bash

Myname="${0##*/}"
Version=2.04

# To do:
# Option running  ~/Contacts/sortcont ?
# Always sort vcf output?
# Or even all output?

:<<'DOC'
= contmgr - list contacts for your terminal iPad, Fritz!Box, hand bag

= Synopsis
contmgr [options] [searchkey]	

== General options:

-h|--help	Print this help and exit
-H|--Help	Show full documentation and exit
-V|--version	Print version and exit
-i|--input=ARG	Take input from file |ARG| with default extension vcf;
		if ARG has no path info, the file is suppposed to reside
		in the same directory as the default input file.
-k|--key=ARG	selection key; selects records containing
		|ARG| in the X-AIM field
-w|--word	search key must be a complete word

== Format options:

-b|--booklet	print booklet
-l|--labels	print address labels
-s|--sorter	print only first line of |--term| format
-T|--tagged	print tag / value list
-t|--term	print to terminal
-v|--vcard	print vcards
-x|--xml	print xml for FritzBox

== Format specific options (b, l, t and T specify relevant formats):

-d|--dark	(t)    set colors for dark background
-f|--font	(bl)   `set font and/or bold font and/or pointsize.
		       Default:
		       --font='DejaVuSerif,DejaVuSerif-Bold 12'
		       Argument examples:
		       'a,b 12' 'a,b' 'a' 'a 12' 'a, 12' ',b' ',b 12' '12'
		       The last one (|'12'|) changes the pointsize only.
-N|--nocolor	(t)    do not use color in terminal output
-n|--noarea=ARG	(bl)   in phone numbers, remove area codes with the
		       value |ARG|, possibly prefixed with 0 (zero)
-r|--return=ARG	(l)    use |ARG| as returnaddres in labels, commas are 
		       replaced with bullets
-B|--blind	(ltTv) suffix label lines with a dot for visually
		       handicapped, text-to-voice progs will pause there
		       Boxes the labels. Creates a nickname in vcards
		       containing most info. The nickname can easily be
		       invoked to be read aloud on an iphone. 

= Description
contmgr lists your contacts to standard output. If you provide a search
key, only contacts containing that key are listed. With the |--word| option, 
the search key must occur as a whole word.

The input is a vcard file exported from, for example, Thunderbird or the
iCloud. The name of the vcard file is supposed to be in the environment
variable CONTACTS, unless it is given with the |--input| option.

There are some limitations on the data that are read from that
vcard file. The following table shows the vcard fields that are stored
and the formats (v=vcard, T=tagged, x=xml, t=terminal, b=booklet, l=label)
in which they are reproduced:

Last	 vTxtbl  N 1
First	 vTxtbl  N 2
Middle	 vTxtb-  N 3
Prefix	 vT-tbl  N 4
Suffix	 vT-tbl  N 5
Nick	 vTxtb-  NICKNAME
Disp	 vT----  FN (unused, reconstructed from above entries)
Org	 vTxtb-  ORG
Url	 vT-t--  URL
Bday	 vT-t--  BDAY
Hmail	 vTxt--  EMAIL;TYPE=HOME
Wmail	 vTxt--  EMAIL;TYPE=WORK
Hpobox	 vT-tbl  ADR;TYPE=HOME 1
Hext	 vT-tbl  ADR;TYPE=HOME 2
Hstreet	 vT-tbl  ADR;TYPE=HOME 3
Hcity	 vT-tbl  ADR;TYPE=HOME 4
Hstate	 vT-tbl  ADR;TYPE=HOME 5
Hzip	 vT-tbl  ADR;TYPE=HOME 6
Hcntry	 vT-tbl  ADR;TYPE=HOME 7
Wpobox	 vT-tbl  ADR;TYPE=WORK 1
Wext	 vT-tbl  ADR;TYPE=WORK 2
Wstreet	 vT-tbl  ADR;TYPE=WORK 3
Wcity	 vT-tbl  ADR;TYPE=WORK 4
Wstate	 vT-tbl  ADR;TYPE=WORK 5
Wzip	 vT-tbl  ADR;TYPE=WORK 6
Wcntry	 vT-tbl  ADR;TYPE=WORK 7
Aim	 vT-t--  X-AIM
Hphone	 vTxt--  TEL;TYPE=HOME
Wphone	 vTxt--  TEL;TYPE=WORK
Mphone	 vTxt--  TEL;TYPE=CELL
Note	 vT-tb-  NOTE

= Configuration
The defaults for some variables, like font, fontsize, vcard file, and
country may be inconvenient. You can set your own defaults in a config
file, either in system file: |$PREFIX/contmgr.conf| or in a user file:
|$HOME/.contmgr.conf|. These files are read in this order and they can
contain input such as this:

   Fsize=12
   Font='DejaVuSerif'
   Bold='DejaVuSerif-Bold'
   Input="$HOME/Contacts.vcf"
   Mycountry='Nederland'
   Mycode=31

The content shown here would have no effect, as its values are the
defaults already.

= Todo
== Country code
The vCard format lacks an entry for the country code, needed for formatting
the zip code and for zip code positioning.n address labels. There is of
course an entry for the country, but that can by expressed in any language,
preferably the local language.

My solution for now is to expect two vcard entries in the vcard file:
|X-CCODE-HOME| and |X-CCode-WORK|, which set the country codes for home
and work addresses. By default, the users own country code |Mycode|, as set
in the configuration file, is used. So normally, these entries are needed
only for foreign addresses.

== Phone number formatting
I suppose phonenumbers to have the format |+can|, where |c| is 1-3
country code digits, a is 1-3 area code digits and n is 1 or more phone
number digits.
If the |c|'s match the value of |Mycode| (say xx), this is converted to
|0xx an|; if not, to |00xx an|. After this, I match the |a|'s with an array
|AreaCodes| and I use the match (say yyy) to convert to |00xx yyy n|.
Finally, the |n|'s are spaced, depending on the number of |n|'s.
Problem: the |AreaCodes| array is valid for the Netherlands only.

= Author
[Wybo Dekker](wybo@dekkerdocumenten.nl)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

    die() { local i; for i; do echo -e "$Myname: $Red$i$Nor"; done 1>&2; exit 1; }
   Warn() { local i; for i; do echo -e "$Myname: $Mag$i$Nor"; done 1>&2; }
helpsrt() { sed -n '/^= Synopsis/,/^= /p' "$0"|sed '1d;$d'; exit; }
helpall() { sed -n "/^:<<'DOC'$/,/^DOC/p" "$0"|sed '1d;$d'|
            less -P"$Myname-${Version/./Â·} (press h for help, q to quit)";exit; }

:<<'DOC' #----------------------------------------------------------------------
= handle_options
synopsis:	 handle_options "$@"
description:	handle the options.
globals used:	 Myname Version AreaCodes
globals  set:	 Args Noarea Grepopt Format Return Fsize Font Bold Input
		 Mycountry Key
returns:	the number of remaining arguments
DOC
#-------------------------------------------------------------------------------
handle_options() {
   local options
   options=$(getopt \
      -n "$Myname" \
      -o bdBf:HhIi:k:lNn:r:sTtvVwx \
      -l booklet,dark,blind,font:,Help,help,input:,key:,labels,noarea:,nocolor,return:,sorter,tagged,term,vcard,version,word,xml \
      -- "$@"
   ) || exit 1
   eval set -- "$options"
   
   Key='' Noarea='' Grepopt=-ril Format='term' Return=''
   Fsize=12 Font='DejaVuSerif' Bold='DejaVuSerif-Bold' Input="$HOME/Contacts.vcf"
   Paperwidth=210 Paperheight=297 Cols=3 Rows=8

   Mycode='' Dot='' Blind=false
   Mycountry='Nederland' # this is emptied except in vcard format
   # shellcheck disable=SC2153
   if [[ -n $PREFIX ]]; then
      if [[ -e $PREFIX/contmgr.conf ]]; then
         # shellcheck disable=SC1091
         source "$PREFIX/contmgr.conf"
      fi
   else
      Warn "Env var PREFIX is undefined; looking for ~/.contmgr.conf only"
   fi
   # shellcheck disable=SC1091
   [[ -e $HOME/.contmgr.conf ]] && source "$HOME/.contmgr.conf"
   [[ -n $Mycode ]] || Warn "You did not set Mycode in any configuration file"
   
   while true; do
      case $1 in
# General options:

      (-h|--help)       # Print this help and exit
			helpsrt
			;;
      (-H|--Help)       # Show full documentation and exit
			helpall
			;;
      (-V|--version)    # Print version and exit
			echo "$Version"
			exit
			;;
      (-i|--input=ARG)  # Take input from file |ARG| with default extension vcf;
			# if ARG has no path info, the file is suppposed to reside
			# in the same directory as the default input file.
			if [[ $2 =~ / ]]; then # pathinfo given?
			   Input="$2"
			else # no path info? then look in default input directory
			   Input="${Input%/*}/$2"
			fi
			Input="${Input%.vcf}.vcf"
			shift 2
			;;
      (-k|--key=ARG)    # selection key; selects records containing
			# |ARG| in the X-AIM field
			Key="$2"
			shift 2
			;;
      (-w|--word)       # search key must be a complete word
			Grepopt=-wirl
			shift
			;;
# Format options:

      (-b|--booklet)    # print booklet
			Format=booklet
			shift
			;;
      (-l|--labels)     # print address labels
			Format=labels
			shift
			;;
      (-s|--sorter)     # print only first line of |--term| format
			Format=sorter
			shift
			;;
      (-T|--tagged)     # print tag / value list
			Format=tagged
			shift
			;;
      (-t|--term)       # print to terminal
			Format=term
			shift
			;;
      (-v|--vcard)      # print vcards
			Format=vcard
			shift
			;;
      (-x|--xml)        # print xml for FritzBox
			Format=xml
			shift
			;;
# Format specific options (b, l, t and T specify relevant formats):

      (-d|--dark)       # (t)  do not use color in terminal output
			dark
			shift
			;;
      (-f|--font)       # (bl) set font and/or bold font and/or pointsize.
			#      Default:
			#       --font='DejaVuSerif,DejaVuSerif-Bold 12'
			#      Argument examples:
			#	'a,b 12' 'a,b' 'a' 'a 12' 'a, 12' ',b' ',b 12' '12'
			#      The last one (|'12'|) changes the pointsize only.
			if [[ $2 =~ ([[:alnum:]_-]*)(,[[:alnum:]_-]*)?( [0-9]+)?$ ]]; then
			   f=${BASH_REMATCH[1]}
			   b=${BASH_REMATCH[2]#,}
			   s=${BASH_REMATCH[3]# }
			  if [[ $f =~ ^[[:digit:]]+ ]]; then
			     Fsize="$f"
			  else
			     [[ -n $f ]] && Font="$f"
			     [[ -n $b ]] && Bold="$b"
			     [[ -n $s ]] && Fsize="$s"
			  fi
			fi
			shift 2
			;;
      (-N|--nocolor)    # (t)  set colors for dark background
			nocolor
			shift
			;;        
      (-n|--noarea=ARG) # (bl) in phone numbers, remove area codes with the
			#      value |ARG|, possibly prefixed with 0 (zero)
			Noarea=${2#0}
			[[ "${AreaCodes[*]}" =~ $Noarea ]] ||
			   die "Unrecognized value for --noarea option"
			shift 2
			;;
      (-r|--return=ARG) # (l)  use |ARG| as returnaddres in labels, commas are 
			#      replaced with bullets
			Return="${2//,/\\bul }"
			shift 2
			;;
      (-B|--blind)      # (ltT) suffix label lines with a dot for visually
			#      handicapped, text-to-voice progs will pause there
			# Labels will be boxed to force reading horizontally
			Dot=.
			Blind=true
			shift
			;;
      (-I)	        instscript "$0" ||
			   die 'the -I option is for developers only'
			exit
			;;
      (--)              shift
			break
			;;
      (*)               break
			;;
      esac
   done
   Args=( "$@" )
}

:<<'DOC' #---------------------------------------------------------------------
= validateemail
description:	validate a comma+space-separated email list
DOC
#-------------------------------------------------------------------------------
validateemail() {
   [[ -n $2 ]] && die "validateemail: expect only 1 argument"
   while IFS=', ' read -r e; do
      [[ "$e" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]] ||
        Warn "Invalid email address: $e"
   done <<<"${1//, /$'\n'}"
}

:<<'DOC' #---------------------------------------------------------------------
= light
description:	set colors for light background
DOC
#-------------------------------------------------------------------------------
light() {
   Red='\e[38;5;1m'
   Mag='\e[38;5;5m'
   Nor='\e[0m'
   Yel='\e[38;5;3m'
   Blu='\e[38;5;4m'
}

:<<'DOC' #---------------------------------------------------------------------
= dark
description:	set colors for dark background
DOC
#-------------------------------------------------------------------------------
dark() {
   Red='\e[1;38;5;9m'
   Mag='\e[1;38;5;13m'
   Nor='\e[0m'
   Yel='\e[1;38;5;11m'
   Blu='\e[1;38;5;6m'
}

:<<'DOC' #---------------------------------------------------------------------
= nocolor
description:	set no colors
DOC
#-------------------------------------------------------------------------------
nocolor() {
   Red=''
   Mag=''
   Nor=''
   Yel=''
   Blu=''
}

:<<'DOC' #---------------------------------------------------------------------
= join
synopsis:	 join separator string [string...]
description:	use first argument as separator to print other non-empty
		arguments separated with it
		 join '=' a b '' d â a=b=d
DOC
#-------------------------------------------------------------------------------
join() {
   local x='' sep="$1"
   shift
   while [ $# -gt 0 ]; do
      [[ -n $1 ]] && x+="${sep}$1"
      shift
   done
   echo "${x##${sep//\\/\\\\}}"
}

:<<'DOC' #---------------------------------------------------------------------
= pr_age
description:	print age; On March 13, 2019:
		after Bday=2011-03-22
		pr_age prints (7) or, for blind people: age: 7
DOC
#-------------------------------------------------------------------------------
pr_age() {
   local byear bmonth bday cyear cmonth cday corr age
   if [[ -n $Bday  ]]; then
      IFS=- read -r byear bmonth bday <<<"$Bday"
      IFS=- read -r cyear cmonth cday <<<"$(date +%Y-%m-%d)"
      corr=0
      if [[ 1"$cmonth" -lt 1"$bmonth" ]] ||
         [[ 1"$cmonth" -eq 1"$bmonth" && 1"$cday" -lt 1"$bday" ]]
      then
         corr=-1
      fi
      age=$((cyear-byear+corr))
      if $Blind; then
         echo "Age: $age"
      else
         echo "($age)"
      fi
   fi
 
}

:<<'DOC' #---------------------------------------------------------------------
= pr_city
synopsis:	 pr_city zip city state areacode [Blind]
description:	Try to format city, state and zip
		if rules not known, print "city, state, zip"
		 pr_city 4158CH Deil '' â 4158 CH Deil
		 pr_city 94595 'Walnut Creek' CA 1 â Walnut Creek CA 94595
		If there is a 5th argument and it is true, zip codes are printed without 
		spaces: this is useful for blind people, because spaces cause
		pronunciation problems for speaking programs.
DOC
#-------------------------------------------------------------------------------
pr_city() {
   local ccode
   [[ -z $2 ]] && return # no city = no address
   if [[ -z $4 ]]; then 
      Warn "Missing country code for $1 $2; using $Mycode"
      ccode=$Mycode
   else
      ccode=$4
   fi
   space=' '
   [[ -n $5 ]] && $5 && space=''
   case "$ccode" in
   (352) # Luxemburg
         echo "L-${1//[L-]/} $2" # L-1234
	 ;;
    (44) # UK
         echo -e "$2\n${1%???}$space${1: -3}" # all but last 3 <space> last 3
	 ;;
    (33|41|43|47|49|358|385) # France, Switserland, Austria, Germany, Finland, Croatia
         echo "$1 $2" 
	 ;;
    (32) # Belgium
         echo "B-${1//[B-]/} $2" # B-1234
	 ;;
    (31) # Netherlands
         echo "${1:0:4}$space${1:4:2} $2" # first 4 <space> last 2
	 ;;
     (1) # USA
         echo "$2 ${1:0:2}$space${1:2:5}"
	 ;;
     (*) Warn "country code $ccode not expected" \
              "please add new entry to my pr_city function"
	 ;;
   esac
}

:<<'DOC' #---------------------------------------------------------------------
= fix
synopsis:	 fix phonenumber
description:	insert spaces in phone number; argument is name of the number
		 Hphone=0630333955
		 fix Hphone && echo $Hphone â 06 3033 3955
DOC
#-------------------------------------------------------------------------------
fix() {
   local area i n p v
   eval "p=\$$1"
   p=${p/+/00}
   case $p in
   ('') eval "$1=''"
        ;;
    (*) for i in "${AreaCodes[@]}"; do
           if [[ $p =~ ^0$i(.*) ]]; then
              area="0$i " n=${BASH_REMATCH[1]}
              [[ $area == "0$Noarea " ]] && area=''
              case ${#n} in
              (4)    v="$n"
		     ;;
              (6|9)  v="${n:0:3} ${n:3:3} ${n:6:3}"
		     ;;
              (7)    v="${n:0:3} ${n:3:4}"
		     ;;
              (8|10) v="${n:0:4} ${n:4:4} ${n:8:2}"
		     ;;
              (11)   v="${n:0:4} ${n:4:3} ${n:7:4}"
		     ;;
              (*)    Warn "Invalid phone number: $area$n"
                     v="$n"
		     ;;
              esac
              eval "$1=\$area\${v% }"
           fi
        done
        ;;
   esac
}

:<<'DOC' #---------------------------------------------------------------------
= texescape
synopsis:	 texescape varname
description:	escape #, _, %, & in the variable named in the argument
		 x='50%'; texescape x; echo $x â 50\%
DOC
#-------------------------------------------------------------------------------
texescape() {
   eval "$1=\${$1//#/\\\\#}
   $1=\${$1//%/\\\\%}
   $1=\${$1//&/\\\\&}
   $1=\${$1//_/\\\\_}"
}

:<<'DOC' #---------------------------------------------------------------------
= displayname
description:	print Last, First (Organization), but clean up if some are empty.

		 First=Wybo Last=Dekker Org=DekDoc displayname â Dekker, Wybo (DekDoc)

		 First=Wybo Last=Dekker Org=''     displayname â Dekker, Wybo

		 First=''   Last=Dekker Org=DekDoc displayname â Dekker (DekDoc)

		 First=''   Last=''     Org=DekDoc displayname â DekDoc
DOC
#-------------------------------------------------------------------------------
displayname() {
   dn="$Last${Suffix:+ }$Suffix${Last:+, }$Prefix${Prefix:+ }$First${First:+ }$Middle${Middle:+ }$Nick${Nick:+ }${Org:+ (}$Org${Org:+)}"
   dn="${dn# }"
   dn="${dn% }"
   [[ $dn =~ ^\((.*)\)$ ]] && dn=${BASH_REMATCH[1]}
   echo "${dn:-âno nameâ}"
}

:<<'DOC' #---------------------------------------------------------------------
= setvar
synopsis:	 setvar varname value vardescription 
description:	set named variable to value, but only if it's empty:
		Example: setvar Hphone +31345652152 'home phone'
DOC
#-------------------------------------------------------------------------------
Hphone='' Mphone='' Wphone='' Hmail='' Wmail='' # satisfy shellcheck
setvar() {
   local current
   eval "current=\$$1"
   if [[ -n $current ]]; then 
      Warn "Skipping $2: only one value for $3 allowed"
   else
      eval "$1='$2'"
   fi
}

:<<'DOC' #---------------------------------------------------------------------
= pr_sorter
description:	print only first line of terminal format
DOC
#-------------------------------------------------------------------------------
pr_sorter() {
   printf "%b %b %b %b\n" "$Disp" "$Bday" "$(pr_age)" "$Aim"
}

:<<'DOC' #---------------------------------------------------------------------
= pr_tagged
description:	print in tag:value format
DOC
#-------------------------------------------------------------------------------
pr_tagged() {
   hc=$(pr_city "$Hzip" "$Hcity" "$Hstate" "$Harea")
   wc=$(pr_city "$Wzip" "$Wcity" "$Wstate" "$Warea")
   dn="$Prefix $First $Middle $Last $Suffix"
   home=''
   work=''
   [[ -n "$Hstreet$hc$Hcountry$Hphone$Hmail" ]] && home=':x:'  
   [[ -n "$Wstreet$wc$Wcountry$Wphone$Wmail" ]] && work=':x:'  
   if [[ $work$home =~ ^:x:$ ]]; then
      work=''
      home=''
   fi
   fix Hphone
   fix Mphone
   fix Wphone
   a=("Naam:		$dn"
      "Organisatie:	$Org"
      "Bijnaam:		$Nick"
      "Geboortedatum:	$Bday"
      "Marker;		$Aim"
      "Mobiel:		$Mphone"
      "Gegevens thuis:	$home"
      "Adres:		$Hstreet"
      ":		$hc"
      ":		${Hcountry%$Mycountry}"
      "Telefoon:	$Hphone"
      "E-mail:		$Hmail"
      "Gegevens werk:	$work"
      "Adres:		$Wstreet"
      ":		$wc"
      ":		${Wcountry%$Mycountry}"
      "Telefoon:	$Wphone"
      "E-mail:		$Wmail"
      "Notitie:		$Note"
     )
   for i in "${a[@]}"; do
      IFS=: read -r tag val <<<"$i"
      [[ $val =~ [[:alnum:]] ]] && echo "$tag: $val"
   done |
   sed "s/\t\+/\t/
	s/:\s\+:x://
	s/^://
	s/\\\\n/$Dot\\n\t/
	s/  */ /g   # squeeze spaces
	s/\. /.~/g
	s/\t /\t/   # remove space from missing first name
	s/.$/&$Dot/ # add $Dot to non-empty lines
   " |
   expand -16
   echo
}

:<<'DOC' #---------------------------------------------------------------------
= pr_oneliner
description:	print in oneliner terminal format
DOC
#-------------------------------------------------------------------------------
pr_oneliner() {
   fix Hphone
   fix Mphone
   fix Wphone
   hc=$(pr_city "$Hzip" "$Hcity" "$Hstate" "$Harea" $Blind)
   wc=$(pr_city "$Wzip" "$Wcity" "$Wstate" "$Warea" $Blind)
   h="$Hpobox, $Hext, $Hstreet, $hc, ${Hcountry%$Mycountry}, $Hphone, ${Hmail/@/ apestaartje }"
   w="$Wpobox, $Wext, $Wstreet, $wc, ${Wcountry%$Mycountry}, $Wphone, ${Wmail/@/ apestaartje }"
   h=$(sed 's/\(, \)\+/, /g;s/^, //;s/, $//' <<<"$h")
   w=$(sed 's/\(, \)\+/, /g;s/^, //;s/, $//' <<<"$w")
   local m=$Mphone n=$Note # for shellcheck
   ( sed 's/\(, \)\+$/, /' <<<"$Disp, $Bday, $(pr_age), $Aim"
   if [[ -n $h ]] && [[ -n $w ]]; then
      echo -n "$h. "
      echo -n "Werk: $w. "
   elif [[ -n $h$w ]]; then
      echo -n "$h$w. "
   fi
   [[ -n $m ]] && echo -n "$m. "
   [[ -n $n ]] && echo -ne "Note: ${n%'\n'}."
   ) |fmt -110
   echo
}

:<<'DOC' #---------------------------------------------------------------------
= pr_term
description:	print in terminal format
DOC
#-------------------------------------------------------------------------------
pr_term() {
   hc=$(pr_city "$Hzip" "$Hcity" "$Hstate" "$Harea")
   wc=$(pr_city "$Wzip" "$Wcity" "$Wstate" "$Warea")
   echo -e "$Norâââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ"
   printf "$Yel%-44s%-10s %-5s %s$Nor\n" "$Disp" "$Bday" "$(pr_age)" "$Aim"
   [[ -n "$Hpobox$Wpobox" ]] && printf "%-30s%-30s\n" "$Hpobox" "$Wpobox"
   [[ -n "$Hext$Wext" ]] && printf "%-30s%-30s\n" "$Hext" "$Wext"
   [[ -n "$Hstreet$Wstreet" ]] && printf "%-30s%-30s\n" "$Hstreet" "$Wstreet"
   [[ -n "$hc$wc" ]] && printf "%-30s%-30s\n" "$hc" "$wc"
   h="${Hcountry%$Mycountry}"
   w="${Wcountry%$Mycountry}"
   [[ -n "$h$w" ]] && printf "%-30s%-30s\n" "$Hcountry" "$Wcountry"
   fix Hphone
   fix Mphone
   fix Wphone
   [[ -n "$Hphone$Mphone$Wphone" ]] &&
      printf "%-20s$Mag%-20s$Nor%-20s\n" "$Hphone" "$Mphone" "$Wphone"
   [[ -n "$Hmail$Wmail" ]] && printf "$Blu%-27s%27s\n" "$Hmail" "$Wmail"
   [[ -n $Note ]] && echo -e "${Note%'\n'}" |fmt -60
}

:<<'DOC' #---------------------------------------------------------------------
= pr_startlabels
description:	print preamble for address labels
DOC
#-------------------------------------------------------------------------------
pr_startlabels() { local awa=''
   [[ -n $Return ]] && awa='\awa'
   cat <<-EOD
	%%!lualatex
	%%=== labels ===
	\documentclass{memoir}
	\usepackage[papersize={${Paperwidth}mm,${Paperheight}mm}]{geometry}
	\usepackage{fontspec}
	\protrudechars=2
	\adjustspacing=2
	\newfontfeature{Microtype}{protrusion=default;expansion=default}
	\directlua{fonts.protrusions.setups.default.factor=.5}
	\setmainfont{$Font}[BoldFont=$Bold]
	\usepackage{polyglossia}\setmainlanguage{dutch}
	\usepackage{labels}
	\LabelRows=$Rows
	\LabelCols=$Cols
	\TopBorder=0mm
	\BottomBorder=0mm
	\LeftBorder=7mm
	\RightBorder=7mm
	\LabelGrid$Blind
	\newcommand{\bul}{{\hfill$\bullet$}\hfill}
	\newcommand{\awa}{\begin{minipage}{56mm}
	  \textbf{\tiny $Return}\\\\%[-.5ex]
	  \protect\rule[2ex]{56mm}{.2mm}
	  \end{minipage}\\\\[-3ex]
	}
	\def\C{$awa}
	\begin{document}
	\fontsize{$Fsize}{$((Fsize+2))}\selectfont
	\begin{labels}
	EOD
}

:<<'DOC' #---------------------------------------------------------------------
= trim
descrtiption:	trim and squeeze named variable
DOC
#-------------------------------------------------------------------------------
trim() {
  local x
  shopt -s extglob
  eval "x=\${$1%%+([[:space:]])}"
  x="${x##+([[:space:]])}"
  eval "$1=\${x//+([[:space:]])/ }"
  shopt -u extglob
}

:<<'DOC' #---------------------------------------------------------------------
= pr_label
description:	print in home and work addresses label format
DOC
#-------------------------------------------------------------------------------
pr_label() {
   local i j ext street zip city state country area name
   for i in H W; do
      for j in pobox ext street zip city state country area; do
         eval $j="\$$i$j"
      done
      [[ -n $ext ]] && street="$ext\n$street"
      [[ -n $street$pobox ]] || continue
      street=${street//#/\\#}
      street=${street//_/\\_}
      name="$Prefix $First $Last $Middle $Suffix"
      trim name
      echo "\\C"
      [[ -n $Org ]] && echo "$Org"
      [[ -n $name ]] && echo "$name"
      [[ -n $pobox ]] && echo -e "$pobox"
      [[ -n $street ]] && echo -e "${street//\\n/\\n}"
      pr_city "$zip" "$city" "$state" "$area" ""
      [[ $country == "$Mycountry" ]] || echo "$country"
      echo
   done |
   sed "s/\. /.~/g
	s/...$/&$Dot/ # add $Dot to lines longer than 2 chars (not \C)
   "
}

:<<'DOC' #---------------------------------------------------------------------
= pr_startbooklet
description:	print preamble for booklet format
DOC
#-------------------------------------------------------------------------------
pr_startbooklet() {
   local name="${Key:-$(basename "${Input%.vcf}")}"
   cat <<-EOD
	%%!lualatex
	%%=== phone book ===
	\documentclass{memoir}
	\usepackage{fontspec}
	\protrudechars=2
	\adjustspacing=2
	\newfontfeature{Microtype}{protrusion=default;expansion=default}
	\directlua{fonts.protrusions.setups.default.factor=.5}
	\setmainfont{$Font}[BoldFont=$Bold]
	\usepackage{polyglossia}\setmainlanguage{dutch}
	\usepackage{ctable}
	\usepackage{colortbl}
	\usepackage{longtable}
	\usepackage[noheadfoot,a4paper,margin=10mm,left=18mm,right=18mm]{geometry}
	\pagestyle{empty}
	\newcommand{\kop}{
	  \hline\strut Naam
	  &Postadres
	  &Telefoon\tabularnewline\hline
	}
	\def\EM#1{\makebox[0pt][r]{#1}}
	\def\Red#1{\textbf{\textcolor[rgb]{1,0,0}{#1} }}
	\def\Blu#1{\textcolor[rgb]{0,0,1}{#1}}
	\def\C#1{}
	\newcolumntype{L}[1]{>{\raggedright}p{#1mm}}
	\newcolumntype{R}[1]{>{\raggedleft}p{#1mm}}
	\setlength{\extrarowheight}{1ex}
	\def\G{\rowcolor[gray]{.8}}
	\begin{document}%\renewcommand{\arraystretch}{.8}
	\fontsize{$Fsize}{$((Fsize+2))}\selectfont
	\begin{longtable}{L{52}L{68}R{36}}
	  \multicolumn{3}{@{}l@{}}{\Large\bfseries Adreslijst $name
	  \hfill\today}\tabularnewline
	  \kop\endfirsthead
	  \kop\endhead
	EOD
}

:<<'DOC' #---------------------------------------------------------------------
= pr_booklet
description:	print in booklet format
DOC
#-------------------------------------------------------------------------------
pr_booklet() {
   ((gray=!gray))
   local G=('\G' '  ') g=${G[$gray]}
   local adr='' name="$Last $Suffix"
   [[ -z $name ]] && name="$Org"
   texescape name
   texescape Org
   local i j street zip city state country
   for i in H W; do
      for j in pobox ext street zip city state country area; do
         eval $j="\$$i$j"
      done
      # create an address only if there is a street or a PO box:
      if [[ -n $street$pobox ]]; then
         adr+="$(join "\n" \
             "$pobox" \
             "$ext" \
             "$street" \
             "$(pr_city "$zip" "$city" "$state" "$area")" \
             "${country%$Mycountry}" "|"
         )"
      fi
   done
   shopt -u nocasematch
   adr=${adr%\\n|}
   adr=${adr/|/[2ex]} # space between home and work address
   adr=${adr//\\n/\\\\}
   shopt -s nocasematch
   texescape adr
   fix Hphone
   fix Mphone
   fix Wphone
   Hmail=${Hmail//_/\\_}
   Wmail=${Wmail//_/\\_}
   echo -n "$g\Red{$name} $Prefix $First"
   [[ -n $Middle ]] && echo -n " $Middle"
   [[ -n $Nick ]] && echo -n " $Nick"
   [[ -n $Org ]] && [[ ! $name == "$Org" ]] && echo -n " ($Org)"
   if [[ -n $Note ]]; then
      local x=()
      texescape Note
      IFS=$'|' read -ra x <<<"${Note//'\n'/|}"
      printf '\\\\\Blu{%s}' "${x[@]}"
   fi
   echo -n "&$adr&"
   echo "\\EM{$(join "}\\\\\\EM{" "$Hphone" "$Mphone" "$Wphone" "$Hmail" "$Wmail")}\\NN"
}

:<<'DOC' #---------------------------------------------------------------------
= pr_startxml
description:	print preamble for FritzBox xml format
DOC
#-------------------------------------------------------------------------------
pr_startxml() {
   cat <<-'EOD'
	<?xml version="1.0" encoding="utf-8"?>
	<phonebooks><phonebook name="Contacts">
	EOD
}

:<<'DOC' #---------------------------------------------------------------------
= pr_xml
description:	print in FritzBox xml format
DOC
#-------------------------------------------------------------------------------
pr_xml() {
   # need at least one telephone number:
   local p=() t=() n=0
   [[ -n $Hphone ]] && { p+=("$Hphone"); t+=('private'); ((n++)); }
   [[ -n $Wphone ]] && { p+=("$Wphone"); t+=('business'); ((n++)); }
   [[ -n $Mphone ]] && { p+=("$Mphone"); t+=('mobile'); ((n++)); }
   if (( n == 0 )); then
      return
   else
      cat <<-EOD
	<contact>
	  <category/>
	  <person>
	    <realName>$Disp</realName>
	  </person>
	EOD
      echo "  <telephony nid=\"$n\">"
      for ((i=0;i<n;i++)); do
         echo "    <number type=\"${t[$i]}\" id=\"$i\">${p[$i]}</number>"
      done
   fi
   echo "  </telephony>"
   p=() t=() n=0
   [[ -n $Hmail ]] && { p+=("$Hmail"); t+=('private'); ((n++)); }
   [[ -n $Wmail ]] && { p+=("$Wmail"); t+=('business'); ((n++)); }
   if [[ $n -gt 0 ]]; then
      echo "  <services nid=\"$n\">"
      for ((i=0;i<n;i++)); do
         echo "    <email classifier=\"${t[$i]}\" id=\"$i\">${p[$i]}</email>"
      done
      echo "  </services>"
   fi
   echo '</contact>'
}

:<<'DOC' #---------------------------------------------------------------------
= pr_vcard
description:	print vcard
DOC
#-------------------------------------------------------------------------------
pr_vcard() {
   local h w i hmw typarr
   declare -A typarr=([H]=HOME [M]=CELL [W]=WORK)
   echo -e "BEGIN:VCARD\nVERSION:3.0"
   h="ADR;TYPE=HOME:$Hpobox;$Hext;$Hstreet;$Hcity;$Hstate;${Hzip// /};$Hcountry"
   w="ADR;TYPE=WORK:$Wpobox;$Wext;$Wstreet;$Wcity;$Wstate;${Wzip// /};$Wcountry"
   for i in "$h" "$w"; do
      if [[ ! $i =~ \;\;\;\;\;\;$ ]]; then
         [[ $i =~ \;$ ]] && i+="$Mycountry"
         echo "$i"
      fi
   done
   [[ -n $Bday  ]] && echo "BDAY:$Bday"
   [[ -n $Hmail ]] && printf "EMAIL;TYPE=HOME:%s\n" "$Hmail"
   [[ -n $Wmail ]] && printf "EMAIL;TYPE=WORK:%s\n" "$Wmail"
   echo "FN:$Disp"
   echo "N:$Last;$First;$Middle;$Prefix;$Suffix"
   [[ -n $Nick  ]] && ! $Blind && echo "NICKNAME:${Nick:1:-1}"
   [[ -n $Note  ]] && echo "NOTE:$Note"
   [[ -n $Org   ]] && echo "ORG:$Org"
   [[ -n $Harea ]] && echo "X-CCODE-HOME:$Harea"
   [[ -n $Warea ]] && echo "X-CCODE-WORK:$Warea"
   set -- HOME CELL WORK
   for hmw in H M W; do
      eval "i=\$${hmw}phone"
      [[ -n $i ]] || continue # i becomes Hphone, Mphone, Wphone
      tel="TEL;TYPE=${typarr[$hmw]}:$i"
      [[ $tel =~ \:$ ]] || echo "$tel"
      shift
   done
   [[ -n $Url ]] && echo "URL:$Url"
   [[ -n $Aim ]] && echo "IMPP;X-SERVICE-TYPE=AIM:aim:$Aim"
   # do this at the end, because pr_oneliner changes the phone nrs:
   $Blind && echo "NICKNAME:$(pr_oneliner)"
   echo -e 'END:VCARD\n'
}

:<<'DOC' #---------------------------------------------------------------------
= filltype
synopsis	 filltype xhome xwork [xcell]
description:	Set Type to the first argument for which the corresponding
		variable is empty; the name of the argument tells the type
		assigned.
		note:
		Made this, because thunderbird exports home address without
		type=HOME if it's the first address, and the work address
		without type=WORK if it's the second address. iCloud exports
		with both type indications.
		thus, in the absence of type indicators
		the first two addresses are home and work
		the first two emails are home and work
		the first three phonenrs are home, work. and celll
DOC
#-------------------------------------------------------------------------------
filltype() {
   until [[ $# -eq 0 ]] || [[ -n $Type  ]]; do
      eval "test -z \$$1 && Type=${1:1}; shift"
   done
}

# this works for dutch users only...
AreaCodes=(
   6 10 13 15 20 23 24 26 30 33 35 36 38 40 43 45 46 50 53 55 58 70 71 72
   73 74 75 76 77 78 79 85 87 88 101 111 113 114 115 117 118 161 162 164
   165 166 167 168 172 174 180 181 182 183 184 186 187 222 223 224 226 227
   228 229 251 252 255 294 297 299 313 314 315 316 317 318 320 321 341 342
   343 344 345 346 347 348 411 412 413 416 418 475 478 481 485 486 487 488
   492 493 495 497 499 511 512 513 514 515 516 517 518 519 521 522 523 524
   525 527 528 529 541 543 544 545 546 547 548 561 562 566 570 571 572 573
   575 577 578 591 592 593 594 595 596 597 598 599 800 900 032 033 034 039
   044 049 061 062 064 0352 0385 0599 01
)

:<<'DOC' #---------------------------------------------------------------------
= mobtest
synopsis:	mobtest Xphone type boolean
description:	Test if the content of the named variable in arg 1 is probably a 
		mobile number. If so, and arg 3 is false, of if not and arg 3 is
		true, issue a warning.
		Finally, edit the content of arg 1 by replacing an initial 
		|+$Mycode| with 0 for nicer display (unless the output format is 
		|vcard|.
DOC
#-------------------------------------------------------------------------------
mobtest() {
   local n
   eval "n=\$$1"
   [[ -z $n ]] && return
   cell=false
   for i in 316 3247 3248[4-9] 3249[1-9] 33[67] 3526.1 393[234] 447[45789] \
            491[567] 599[479][56]
   do
      if [[ $n =~ ^\+$i ]]; then
         cell=true
         break
      fi
   done
   if [[ $cell != "$3" ]]; then
      if $cell; then 
         Warn "$2 phone $n looks like a mobile number"
      else
         Warn "$2 phone $n does not look like a mobile number"
      fi
   fi
   if [[ $Format != vcard ]]; then
      n=${n/+$Mycode/0}
      eval "$1=\$n"
   fi
}

light # start with colors for a light background

handle_options "$@"
set -- "${Args[@]}"

command -v msort  >/dev/null || die "Please install msort"

searchkey="$1"
shopt -s nocasematch

Input="$(eval "realpath '$Input'")" # eval allows use of ~
[[ -n $Input ]] || die "environment var CONTACTS was empty and --input option not used"
[[ -e $Input ]] || die "input file $Input not found"
tmp="$(mktemp -dt "$Myname".XXXXXXXXXX)"

cd "$tmp" || die "Could not cd to $tmp"

case $Format in
(labels)  pr_startlabels;;
(booklet) pr_startbooklet;;
(xml)     pr_startxml;;
(vcard)   ;;
(term)    ;;
esac

sed '
/^ITEM[0-9]\..*/Is/ITEM[0-9]\.//I	# remove ITEMs
s/\\,/,/g		# unescape commas
/^$/d			# remove empty lines
s/^END:VCARD/&\n/I	# insert empty line after END:VCARD as a record separator for msort.
s/\r//g			# remove \r for unix line endings
s/;TYPE=\(PREF\|VOICE\|INTERNET\)//gI	# Remove unused types
s/;TYPE=IPHONE/;TYPE=CELL/gI		# IPHONE is a CELL phone
/^\(REV\|PRODID\|UID\|VERSION\|FN\|IMPP\):/Id		# remove unused entries
/TEL[:;]/Is/[() ~Â -]//g			# + and digits only
/TEL[;:]/Is/:00/:+/			# 00 â +
/TEL[;:]/Is/:0/:+'"$Mycode"'/		# 0 â +31
/TYPE=\(FAX\|PAGER\)/Id			# remove FAX etc. entries
' "$Input" |
# sort by N and/or ORG, ignore â and ' at start of N-field:
msort --quiet \
      --suppress-log \
      --block \
      --tag="N:['â]?" \
        --fold-case \
      --tag=ORG: \
        --fold-case \
        --optional='=' \
	|
# one file xnnnnn for each vcard:
csplit --suppress-matched -ksz -fx -n5 - /BEGIN:VCARD/ '{*}'

# read each file containing the search key:
find . -type f -name 'x*' -print0 |
xargs --null grep $Grepopt "$searchkey" |
sort |
while read -r file; do
   unset Aim Bday Disp First \
	 Hcity Hcountry Hext Hmail Hphone Hpobox Hstate Hstreet Hzip \
	 Last Middle Mphone Nick Note Org Prefix Suffix Url \
	 Wcity Wcountry Wext Wmail Wphone Wpobox Wstate Wstreet Wzip \
	 ahome awork ehome ework pcell phome pwork
   Harea='' Warea=''
   while IFS= read -r line; do
      Type=''
      if [[ $line =~ TYPE=([[:alpha:]]*) ]]; then
         Type="${BASH_REMATCH[1]}"
         line=${line/;TYPE=$Type/}
      fi
      if [[ $line =~ ^N:(.*)\;(.*)\;(.*)\;(.*)\;(.*) ]]; then
         Last=${BASH_REMATCH[1]}
         First=${BASH_REMATCH[2]}
         Middle=${BASH_REMATCH[3]}
         Prefix=${BASH_REMATCH[4]}
         Suffix=${BASH_REMATCH[5]}
      elif [[ $line =~ ^NICKNAME:(.*) ]]; then
         # shellcheck disable=SC1111
         Nick="â${BASH_REMATCH[1]}â"
      elif [[ $line =~ ^END:VCARD ]]; then
         Disp=$(displayname)
         break
      elif [[ $line =~ ^ORG:(.*) ]]; then
         Org=${BASH_REMATCH[1]%;}
      elif [[ $line =~ ^URL*:(.*) ]]; then
         Url=${BASH_REMATCH[1]}
      elif [[ $line =~ ^BDAY.*:(.*) ]]; then
         Bday=${BASH_REMATCH[1]}
      elif [[ $line =~ ^EMAIL:(.*) ]]; then
         m="${BASH_REMATCH[1]}"
         if validateemail "$m"; then
            [[ -z $Type ]] && filltype ehome ework
            # shellcheck disable=SC2034
            case $Type in
            (home) ehome=1
                   setvar Hmail "$m" 'home email'
                   ;;
            (work) ework=1
                   setvar Wmail "$m" 'work email'
                   ;;
               (*) Warn "Skipping email address $m: unrecognized type ($Type)"
            esac
         fi
      elif [[ $line =~ ^ADR:(.*)\;(.*)\;(.*)\;(.*)\;(.*)\;(.*)\;(.*)$ ]]; then
         filltype ahome awork
         # shellcheck disable=SC2034
         case $Type in
         (home)
             ahome=1
	     Hpobox="${BASH_REMATCH[1]}"
             Hext="${BASH_REMATCH[2]}"
             Hstreet="${BASH_REMATCH[3]}"
             Hcity="${BASH_REMATCH[4]}"
             Hstate="${BASH_REMATCH[5]}"
             Hzip="${BASH_REMATCH[6]^^}"
             Hzip="${Hzip// /}"
             Hcountry="${BASH_REMATCH[7]/Netherlands/Nederland}"
             ;;
         (work)
             awork=1
             Wpobox="${BASH_REMATCH[1]}"
             Wext="${BASH_REMATCH[2]}"
             Wstreet="${BASH_REMATCH[3]}"
             Wcity="${BASH_REMATCH[4]}"
             Wstate="${BASH_REMATCH[5]}"
             Wzip="${BASH_REMATCH[6]^^}"
             Wzip="${Wzip// /}"
             Wcountry="${BASH_REMATCH[7]/Netherlands/Nederland}"
             ;;
        ('') Warn "Already have home and work addresses, skipping $line"
             ;;
         (*) Warn "Skipping address $line of unrecognized type ($Type)"
         esac
      elif [[ $line =~ ^X-CCODE-HOME:(.*) ]]; then
         Harea=${BASH_REMATCH[1]}
      elif [[ $line =~ ^X-CCODE-WORK:(.*) ]]; then
         Warea=${BASH_REMATCH[1]}
      elif [[ $line =~ ^X-AIM.*:(.*)$ ]]; then
         Aim=${BASH_REMATCH[1]}
      elif [[ $line =~ ^TEL:(.*) ]]; then
         v="${BASH_REMATCH[1]}"
         if [[ ! $v =~ ^(11|14|\+)[0-9]+$ ]]; then
            Warn "$(displayname): phone number $v has wrong format"
         fi
         # v is now 11n or 114 or +nnnnn...
         filltype phome pwork pcell
         # shellcheck disable=SC2034
         case $Type in
         (home) phome=1 # remember that home phone was set
                setvar Hphone "$v" 'home phone'
                ;;
         (work) pwork=1 # remember that work phone was set
                setvar Wphone "$v" 'work phone'
                ;;
         (cell) pcell=1 # remember that cell phone was set
                setvar Mphone "$v" 'cell phone'
                ;;
           ('') Warn "Already have home, mobile and work phone numbers, skipping $v"
                ;;
            (*) Warn "Skipping phone number ($v) of unrecognized type ($Type)"
         esac
      elif [[ $line =~ ^NOTE:(.*) ]]; then
         Note=${BASH_REMATCH[1]}
      fi
   done < "$file"

   # If a key was specified, print only if the record has that key.
   # No key specified, just print.
   [[ -n $Key ]] && [[ ! $Aim == "$Key" ]] && continue

   # Check if phone numbers are cell/not cell as expected
   # and replace initial +$Mycode with 0:
   mobtest "Hphone" home false
   mobtest "Wphone" work false
   mobtest "Mphone" mobile true

   case $Format in
   (labels)  pr_label;;
   (booklet) pr_booklet;;
   (xml)     pr_xml;;
   (term)    if $Blind; then pr_oneliner; else pr_term; fi;;
   (sorter)  pr_sorter;;
   (tagged)  pr_tagged;;
   (vcard)   pr_vcard;;
   esac
done
case $Format in
(labels)  echo '\end{labels}\end{document}';;
(term)    ;;
(sorter)  ;;
(vcard)   ;;
(xml)     echo -e '</phonebook></phonebooks>';;
(booklet) echo '\end{longtable}\end{document}';;
esac
rm -r "$tmp"
